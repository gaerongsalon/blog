service:
  name: ${env:BLOG_NAME}-blog-api

plugins:
  - serverless-plugin-scripts
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline

custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
        - better-sqlite3
  prune:
    automatic: true
    number: 7
  scripts:
    hooks:
      "webpack:package:packExternalModules": /bin/bash .prepackage.sh

package:
  excludeDevDependencies: true
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  apiGateway:
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - "image/*"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:GetObjectAcl"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
        - "s3:HeadObject"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::${env:INTERNAL_FILE_BUCKET}/*"
        - "arn:aws:s3:::${env:STATIC_FILE_BUCKET}/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::${env:INTERNAL_FILE_BUCKET}"
        - "arn:aws:s3:::${env:STATIC_FILE_BUCKET}"
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PASSWORD: ${env:REDIS_PASSWORD}
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    S3CB_URL: ${env:S3CB_URL}
    S3CB_ID: ${env:S3CB_ID}
    S3CB_PASSWORD: ${env:S3CB_PASSWORD}
    INTERNAL_FILE_BUCKET: ${env:INTERNAL_FILE_BUCKET}
    INTERNAL_FILE_S3_PREFIX: ${env:INTERNAL_FILE_S3_PREFIX}
    STATIC_FILE_BUCKET: ${env:STATIC_FILE_BUCKET}
    DB_KEY: ${env:DB_KEY}
    BLOG_WRITERS: ${env:BLOG_WRITERS}
    CONSOLE_LOG_LEVEL: ${env:CONSOLE_LOG_LEVEL}
    SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
    SLACK_CHANNEL: ${env:SLACK_CHANNEL}
    SLACK_LOG_LEVEL: ${env:SLACK_LOG_LEVEL}

functions:
  auth:
    handler: src/handlers/auth.handle
    memorySize: 256
    timeout: 5
  grant:
    handler: src/handlers/grant.handle
    memorySize: 256
    timeout: 5
    events:
      - http:
          method: POST
          path: /api/grant
          authorizer: auth
  getUploadUrl:
    handler: src/handlers/getUploadUrl.handle
    memorySize: 256
    timeout: 5
    events:
      - http:
          method: GET
          path: /api/image/upload
          authorizer: auth
  optimizeImage:
    handler: src/handlers/optimizeImage.handle
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: POST
          path: /api/image/{uploadKey}
          authorizer: auth
  getImage:
    handler: src/handlers/getImage.handle
    memorySize: 256
    timeout: 5
    events:
      - http:
          method: GET
          path: /image/{imageKey}
  queryDatabase:
    handler: src/handlers/queryDatabase.handle
    memorySize: 1024
    timeout: 15
    events:
      - http:
          method: GET
          path: /api/{resource}
      - http:
          method: GET
          path: /api/{resource}/{id}
    layers:
      - arn:aws:lambda:ap-northeast-2:467731270623:layer:BetterSqlite3:4
  upsertArticle:
    handler: src/handlers/upsertArticle.handle
    memorySize: 1024
    timeout: 15
    events:
      - http:
          method: PUT
          path: /api/article/{slug}
          authorizer: auth
    layers:
      - arn:aws:lambda:ap-northeast-2:467731270623:layer:BetterSqlite3:4
  deleteArticle:
    handler: src/handlers/deleteArticle.handle
    memorySize: 1024
    timeout: 15
    events:
      - http:
          method: DELETE
          path: /api/article/{slug}
          authorizer: auth
    layers:
      - arn:aws:lambda:ap-northeast-2:467731270623:layer:BetterSqlite3:4
  serveHtml:
    handler: src/handlers/serveHtml.handle
    memorySize: 256
    timeout: 5
    events:
      - http: GET /
      - http: GET /{file}
      - http: GET /article/{articleId}
      - http: GET /article/{articleId}/{action}
      - http: GET /articles
      - http: GET /category/{category}
      - http: GET /categories
      - http: GET /tag/{tag}
      - http: GET /tags
      - http: GET /static/css/{file}
      - http: GET /static/js/{file}
      - http: GET /static/media/{file}
